// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // EssentialMetadata
  //

  // LfiDaeSlowVoltageColumn
  //

  inline
  bool access::composite_value_traits< ::LfiDaeSlowVoltageColumn >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.size_null;
    r = r && i.type_null;
    r = r && i.fname_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::LfiDaeSlowVoltageColumn >::
  set_null (image_type& i, mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    i.size_null = 1;
    i.type_null = 1;
    i.fname_null = 1;
  }

  // LfiDaeSlowVoltage
  //

  inline
  access::object_traits< ::LfiDaeSlowVoltage >::id_type
  access::object_traits< ::LfiDaeSlowVoltage >::
  id (const object_type& o)
  {
    return o.das_id_;
  }

  inline
  void access::object_traits< ::LfiDaeSlowVoltage >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits< ::LfiDaeSlowVoltage >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::LfiDaeSlowVoltage >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TestLogImage
  //

  inline
  access::object_traits< ::TestLogImage >::id_type
  access::object_traits< ::TestLogImage >::
  id (const object_type& o)
  {
    return o.das_id_;
  }

  inline
  void access::object_traits< ::TestLogImage >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits< ::TestLogImage >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::TestLogImage >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::TestLogImage >::
  load_ (statements_type&, object_type&)
  {
  }

  // TestLog
  //

  inline
  access::object_traits< ::TestLog >::id_type
  access::object_traits< ::TestLog >::
  id (const object_type& o)
  {
    return o.das_id_;
  }

  inline
  void access::object_traits< ::TestLog >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits< ::TestLog >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::TestLog >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

