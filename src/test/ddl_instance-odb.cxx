// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "ddl_instance-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/details/shared-ptr.hxx>

#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // EssentialMetadata
  //

  bool access::object_traits< ::EssentialMetadata >::
  grow (image_type& i, my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // name_
    //
    if (t[0UL])
    {
      i.name_value.capacity (i.name_size);
      grew = true;
    }

    // version_
    //
    t[1UL] = 0;

    // dbUserId_
    //
    if (t[2UL])
    {
      i.dbUserId_value.capacity (i.dbUserId_size);
      grew = true;
    }

    // creationDate_
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits< ::EssentialMetadata >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // name_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.name_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.name_value.capacity ());
    b[n].length = &i.name_size;
    b[n].is_null = &i.name_null;
    n++;

    // version_
    //
    b[n].buffer_type = MYSQL_TYPE_SHORT;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.version_value;
    b[n].is_null = &i.version_null;
    n++;

    // dbUserId_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.dbUserId_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.dbUserId_value.capacity ());
    b[n].length = &i.dbUserId_size;
    b[n].is_null = &i.dbUserId_null;
    n++;

    // creationDate_
    //
    b[n].buffer_type = MYSQL_TYPE_DATETIME;
    b[n].buffer = &i.creationDate_value;
    b[n].is_null = &i.creationDate_null;
    n++;
  }

  bool access::object_traits< ::EssentialMetadata >::
  init (image_type& i, const object_type& o, mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // name_
    //
    {
      ::std::string const& v =
        o.name_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.name_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.name_value,
        size,
        is_null,
        v);
      i.name_null = is_null;
      i.name_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.name_value.capacity ());
    }

    // version_
    //
    {
      short int const& v =
        o.version_;

      bool is_null (false);
      mysql::value_traits<
          short int,
          mysql::id_short >::set_image (
        i.version_value, is_null, v);
      i.version_null = is_null;
    }

    // dbUserId_
    //
    {
      ::std::string const& v =
        o.dbUserId_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.dbUserId_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.dbUserId_value,
        size,
        is_null,
        v);
      i.dbUserId_null = is_null;
      i.dbUserId_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.dbUserId_value.capacity ());
    }

    // creationDate_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.creationDate_;

      bool is_null (true);
      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_image (
        i.creationDate_value, is_null, v);
      i.creationDate_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::EssentialMetadata >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // name_
    //
    {
      ::std::string& v =
        o.name_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.name_value,
        i.name_size,
        i.name_null);
    }

    // version_
    //
    {
      short int& v =
        o.version_;

      mysql::value_traits<
          short int,
          mysql::id_short >::set_value (
        v,
        i.version_value,
        i.version_null);
    }

    // dbUserId_
    //
    {
      ::std::string& v =
        o.dbUserId_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.dbUserId_value,
        i.dbUserId_size,
        i.dbUserId_null);
    }

    // creationDate_
    //
    {
      ::boost::posix_time::ptime& v =
        o.creationDate_;

      mysql::value_traits<
          ::boost::posix_time::ptime,
          mysql::id_datetime >::set_value (
        v,
        i.creationDate_value,
        i.creationDate_null);
    }
  }

  // LfiDaeSlowVoltageColumn
  //

  bool access::composite_value_traits< ::LfiDaeSlowVoltageColumn >::
  grow (image_type& i, my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // size_
    //
    t[0UL] = 0;

    // type_
    //
    if (t[1UL])
    {
      i.type_value.capacity (i.type_size);
      grew = true;
    }

    // fname_
    //
    if (t[2UL])
    {
      i.fname_value.capacity (i.fname_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::LfiDaeSlowVoltageColumn >::
  bind (MYSQL_BIND* b, image_type& i, mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // size_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.size_value;
    b[n].is_null = &i.size_null;
    n++;

    // type_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.type_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.type_value.capacity ());
    b[n].length = &i.type_size;
    b[n].is_null = &i.type_null;
    n++;

    // fname_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.fname_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.fname_value.capacity ());
    b[n].length = &i.fname_size;
    b[n].is_null = &i.fname_null;
    n++;
  }

  bool access::composite_value_traits< ::LfiDaeSlowVoltageColumn >::
  init (image_type& i, const value_type& o, mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // size_
    //
    {
      long long int const& v =
        o.size_;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.size_value, is_null, v);
      i.size_null = is_null;
    }

    // type_
    //
    {
      ::std::string const& v =
        o.type_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.type_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.type_value,
        size,
        is_null,
        v);
      i.type_null = is_null;
      i.type_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.type_value.capacity ());
    }

    // fname_
    //
    {
      ::std::string const& v =
        o.fname_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.fname_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.fname_value,
        size,
        is_null,
        v);
      i.fname_null = is_null;
      i.fname_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.fname_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::LfiDaeSlowVoltageColumn >::
  init (value_type& o, const image_type&  i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // size_
    //
    {
      long long int& v =
        o.size_;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.size_value,
        i.size_null);
    }

    // type_
    //
    {
      ::std::string& v =
        o.type_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.type_value,
        i.type_size,
        i.type_null);
    }

    // fname_
    //
    {
      ::std::string& v =
        o.fname_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.fname_value,
        i.fname_size,
        i.fname_null);
    }
  }

  // LfiDaeSlowVoltage
  //

  // columns_
  //

  const char access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  select_all_statement[] =
  "SELECT "
  "`LfiDaeSlowVoltage_columns`.`key`,"
  "`LfiDaeSlowVoltage_columns`.`value_size`,"
  "`LfiDaeSlowVoltage_columns`.`value_type`,"
  "`LfiDaeSlowVoltage_columns`.`value_fname`"
  " FROM `LfiDaeSlowVoltage_columns`"
  " WHERE `LfiDaeSlowVoltage_columns`.`object_id`=?";

  const char access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  insert_one_statement[] =
  "INSERT INTO `LfiDaeSlowVoltage_columns` ("
  "`object_id`,"
  "`key`,"
  "`value_size`,"
  "`value_type`,"
  "`value_fname`)"
  " VALUES (?,?,?,?,?)";

  const char access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  delete_all_statement[] =
  "DELETE FROM `LfiDaeSlowVoltage_columns`"
  " WHERE `object_id`=?";

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        cond_image_type& c)
  {
    ODB_POTENTIALLY_UNUSED (c);

    std::size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // key
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = d.key_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      d.key_value.capacity ());
    b[n].length = &d.key_size;
    b[n].is_null = &d.key_null;
    n++;

    // value
    //
    composite_value_traits< value_type >::bind (b + n, d.value_value, sk);
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  grow (data_image_type& i, my_bool* t)
  {
    bool grew (false);

    // key
    //
    if (t[0UL])
    {
      i.key_value.capacity (i.key_size);
      grew = true;
    }

    // value
    //
    if (composite_value_traits< value_type >::grow (
          i.value_value, t + 1UL))
    {
      grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  init (data_image_type& i, const key_type& k, const value_type& v)
  {
    using namespace mysql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // key
    //
    {
      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.key_value.capacity ());
      mysql::value_traits<
          key_type,
          mysql::id_string >::set_image (
        i.key_value,
        size,
        is_null,
        k);
      i.key_null = is_null;
      i.key_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.key_value.capacity ());
    }

    // value
    //
    {
      if (composite_value_traits< value_type >::init (
            i.value_value,
            v,
            sk))
        grew = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  init (key_type& k, value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // key
    //
    {
      mysql::value_traits<
          key_type,
          mysql::id_string >::set_value (
        k,
        i.key_value,
        i.key_size,
        i.key_null);
    }

    // value
    //
    {
      composite_value_traits< value_type >::init (
        v,
        i.value_value,
        db);
    }
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  insert_one (const key_type& k, const value_type& v, void* d)
  {
    using namespace mysql;

    statements_type& sts (*static_cast< statements_type* > (d));
    binding& b (sts.data_image_binding ());
    data_image_type& di (sts.data_image ());

    init (di, k, v);

    if (di.version != sts.data_image_version ())
    {
      bind (b.bind, 0, sts.id_binding ().count, di);
      sts.data_image_version (di.version);
      b.version++;
      sts.select_image_binding ().version++;
    }

    if (!sts.insert_one_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  load_all (key_type& k, value_type& v, void* d)
  {
    using namespace mysql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (k, v, di, &sts.connection ().database ());

    select_statement& st (sts.select_all_statement ());
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      grow (di, sts.select_image_truncated ());

      if (di.version != sts.data_image_version ())
      {
        binding& b (sts.data_image_binding ());
        bind (b.bind, 0, sts.id_binding ().count, di);
        sts.data_image_version (di.version);
        b.version++;
        sts.select_image_binding ().version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  delete_all (void* d)
  {
    using namespace mysql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_all_statement ().execute ();
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  persist (const container_type& c,
           const mysql::binding& id,
           statements_type& sts)
  {
    using namespace mysql;

    binding& b (sts.data_image_binding ());
    if (id.version != sts.data_id_binding_version () || b.version == 0)
    {
      bind (b.bind, id.bind, id.count, sts.data_image ());
      sts.data_id_binding_version (id.version);
      b.version++;
      sts.select_image_binding ().version++;
    }

    sts.id_binding (id);
    functions_type& fs (sts.functions ());
    container_traits_type::persist (c, fs);
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  load (container_type& c,
        const mysql::binding& id,
        statements_type& sts)
  {
    using namespace mysql;

    binding& db (sts.data_image_binding ());
    if (id.version != sts.data_id_binding_version () || db.version == 0)
    {
      bind (db.bind, id.bind, id.count, sts.data_image ());
      sts.data_id_binding_version (id.version);
      db.version++;
      sts.select_image_binding ().version++;
    }

    binding& cb (sts.cond_image_binding ());
    if (id.version != sts.cond_id_binding_version () || cb.version == 0)
    {
      bind (cb.bind, id.bind, id.count, sts.cond_image ());
      sts.cond_id_binding_version (id.version);
      cb.version++;
    }

    select_statement& st (sts.select_all_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      data_image_type& di (sts.data_image ());
      grow (di, sts.select_image_truncated ());

      if (di.version != sts.data_image_version ())
      {
        bind (db.bind, 0, id.count, sts.data_image ());
        sts.data_image_version (di.version);
        db.version++;
        sts.select_image_binding ().version++;
        st.refetch ();
      }
    }

    bool more (r != select_statement::no_data);

    sts.id_binding (id);
    functions_type& fs (sts.functions ());
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  update (const container_type& c,
          const mysql::binding& id,
          statements_type& sts)
  {
    using namespace mysql;

    binding& db (sts.data_image_binding ());
    if (id.version != sts.data_id_binding_version () || db.version == 0)
    {
      bind (db.bind, id.bind, id.count, sts.data_image ());
      sts.data_id_binding_version (id.version);
      db.version++;
      sts.select_image_binding ().version++;
    }

    binding& cb (sts.cond_image_binding ());
    if (id.version != sts.cond_id_binding_version () || cb.version == 0)
    {
      bind (cb.bind, id.bind, id.count, sts.cond_image ());
      sts.cond_id_binding_version (id.version);
      cb.version++;
    }

    sts.id_binding (id);
    functions_type& fs (sts.functions ());
    container_traits_type::update (c, fs);
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::columns_traits::
  erase (const mysql::binding& id, statements_type& sts)
  {
    using namespace mysql;

    binding& b (sts.cond_image_binding ());
    if (id.version != sts.cond_id_binding_version () || b.version == 0)
    {
      bind (b.bind, id.bind, id.count, sts.cond_image ());
      sts.cond_id_binding_version (id.version);
      b.version++;
    }

    sts.id_binding (id);
    functions_type& fs (sts.functions ());
    container_traits_type::erase (fs);
  }

  access::object_traits< ::LfiDaeSlowVoltage >::id_type
  access::object_traits< ::LfiDaeSlowVoltage >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        id,
        i.das_id_value,
        i.das_id_null);
    }

    return id;
  }

  bool access::object_traits< ::LfiDaeSlowVoltage >::
  grow (image_type& i, my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // EssentialMetadata base
    //
    if (object_traits< ::EssentialMetadata >::grow (i, t + 0UL))
      grew = true;

    // das_id_
    //
    t[4UL] = 0;

    // relative_path_
    //
    if (t[5UL])
    {
      i.relative_path_value.capacity (i.relative_path_size);
      grew = true;
    }

    // runId_
    //
    if (t[6UL])
    {
      i.runId_value.capacity (i.runId_size);
      grew = true;
    }

    // startTime_
    //
    t[7UL] = 0;

    // endTime_
    //
    t[8UL] = 0;

    // apid_
    //
    t[9UL] = 0;

    // type_
    //
    t[10UL] = 0;

    // subtype_
    //
    t[11UL] = 0;

    // pi1Val_
    //
    t[12UL] = 0;

    // pi2Val_
    //
    t[13UL] = 0;

    return grew;
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // EssentialMetadata base
    //
    object_traits< ::EssentialMetadata >::bind (b + n, i, sk);
    n += 4UL;

    // das_id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 0;
      b[n].buffer = &i.das_id_value;
      b[n].is_null = &i.das_id_null;
      n++;
    }

    // relative_path_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.relative_path_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.relative_path_value.capacity ());
    b[n].length = &i.relative_path_size;
    b[n].is_null = &i.relative_path_null;
    n++;

    // runId_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.runId_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.runId_value.capacity ());
    b[n].length = &i.runId_size;
    b[n].is_null = &i.runId_null;
    n++;

    // startTime_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.startTime_value;
    b[n].is_null = &i.startTime_null;
    n++;

    // endTime_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.endTime_value;
    b[n].is_null = &i.endTime_null;
    n++;

    // apid_
    //
    b[n].buffer_type = MYSQL_TYPE_SHORT;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.apid_value;
    b[n].is_null = &i.apid_null;
    n++;

    // type_
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.type_value;
    b[n].is_null = &i.type_null;
    n++;

    // subtype_
    //
    b[n].buffer_type = MYSQL_TYPE_TINY;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.subtype_value;
    b[n].is_null = &i.subtype_null;
    n++;

    // pi1Val_
    //
    b[n].buffer_type = MYSQL_TYPE_SHORT;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.pi1Val_value;
    b[n].is_null = &i.pi1Val_null;
    n++;

    // pi2Val_
    //
    b[n].buffer_type = MYSQL_TYPE_SHORT;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.pi2Val_value;
    b[n].is_null = &i.pi2Val_null;
    n++;
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::LfiDaeSlowVoltage >::
  init (image_type& i, const object_type& o, mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // EssentialMetadata base
    //
    if (object_traits< ::EssentialMetadata >::init (i, o, sk))
      grew = true;

    // das_id_
    //
    if (sk == statement_insert)
    {
      long long int const& v =
        o.das_id_;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.das_id_value, is_null, v);
      i.das_id_null = is_null;
    }

    // relative_path_
    //
    {
      ::std::string const& v =
        o.relative_path_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.relative_path_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.relative_path_value,
        size,
        is_null,
        v);
      i.relative_path_null = is_null;
      i.relative_path_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.relative_path_value.capacity ());
    }

    // runId_
    //
    {
      ::std::string const& v =
        o.runId_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.runId_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.runId_value,
        size,
        is_null,
        v);
      i.runId_null = is_null;
      i.runId_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.runId_value.capacity ());
    }

    // startTime_
    //
    {
      long long int const& v =
        o.startTime_;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.startTime_value, is_null, v);
      i.startTime_null = is_null;
    }

    // endTime_
    //
    {
      long long int const& v =
        o.endTime_;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.endTime_value, is_null, v);
      i.endTime_null = is_null;
    }

    // apid_
    //
    {
      short int const& v =
        o.apid_;

      bool is_null (false);
      mysql::value_traits<
          short int,
          mysql::id_short >::set_image (
        i.apid_value, is_null, v);
      i.apid_null = is_null;
    }

    // type_
    //
    {
      char const& v =
        o.type_;

      bool is_null (false);
      mysql::value_traits<
          char,
          mysql::id_tiny >::set_image (
        i.type_value, is_null, v);
      i.type_null = is_null;
    }

    // subtype_
    //
    {
      char const& v =
        o.subtype_;

      bool is_null (false);
      mysql::value_traits<
          char,
          mysql::id_tiny >::set_image (
        i.subtype_value, is_null, v);
      i.subtype_null = is_null;
    }

    // pi1Val_
    //
    {
      short int const& v =
        o.pi1Val_;

      bool is_null (false);
      mysql::value_traits<
          short int,
          mysql::id_short >::set_image (
        i.pi1Val_value, is_null, v);
      i.pi1Val_null = is_null;
    }

    // pi2Val_
    //
    {
      short int const& v =
        o.pi2Val_;

      bool is_null (false);
      mysql::value_traits<
          short int,
          mysql::id_short >::set_image (
        i.pi2Val_value, is_null, v);
      i.pi2Val_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EssentialMetadata base
    //
    object_traits< ::EssentialMetadata >::init (o, i, db);

    // das_id_
    //
    {
      long long int& v =
        o.das_id_;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.das_id_value,
        i.das_id_null);
    }

    // relative_path_
    //
    {
      ::std::string& v =
        o.relative_path_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.relative_path_value,
        i.relative_path_size,
        i.relative_path_null);
    }

    // runId_
    //
    {
      ::std::string& v =
        o.runId_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.runId_value,
        i.runId_size,
        i.runId_null);
    }

    // startTime_
    //
    {
      long long int& v =
        o.startTime_;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.startTime_value,
        i.startTime_null);
    }

    // endTime_
    //
    {
      long long int& v =
        o.endTime_;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.endTime_value,
        i.endTime_null);
    }

    // apid_
    //
    {
      short int& v =
        o.apid_;

      mysql::value_traits<
          short int,
          mysql::id_short >::set_value (
        v,
        i.apid_value,
        i.apid_null);
    }

    // type_
    //
    {
      char& v =
        o.type_;

      mysql::value_traits<
          char,
          mysql::id_tiny >::set_value (
        v,
        i.type_value,
        i.type_null);
    }

    // subtype_
    //
    {
      char& v =
        o.subtype_;

      mysql::value_traits<
          char,
          mysql::id_tiny >::set_value (
        v,
        i.subtype_value,
        i.subtype_null);
    }

    // pi1Val_
    //
    {
      short int& v =
        o.pi1Val_;

      mysql::value_traits<
          short int,
          mysql::id_short >::set_value (
        v,
        i.pi1Val_value,
        i.pi1Val_null);
    }

    // pi2Val_
    //
    {
      short int& v =
        o.pi2Val_;

      mysql::value_traits<
          short int,
          mysql::id_short >::set_value (
        v,
        i.pi2Val_value,
        i.pi2Val_null);
    }
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::LfiDaeSlowVoltage >::container_statement_cache_type
  {
    mysql::container_statements_impl< columns_traits > columns_;

    container_statement_cache_type (mysql::connection& c)
    : columns_ (c)
    {
    }
  };

  const char access::object_traits< ::LfiDaeSlowVoltage >::persist_statement[] =
  "INSERT INTO `LfiDaeSlowVoltage` ("
  "`name`,"
  "`version`,"
  "`dbUserId`,"
  "`creationDate`,"
  "`das_id`,"
  "`relative_path`,"
  "`runId`,"
  "`startTime`,"
  "`endTime`,"
  "`apid`,"
  "`type`,"
  "`subtype`,"
  "`pi1Val`,"
  "`pi2Val`)"
  " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

  const char access::object_traits< ::LfiDaeSlowVoltage >::find_statement[] =
  "SELECT "
  "`LfiDaeSlowVoltage`.`name`,"
  "`LfiDaeSlowVoltage`.`version`,"
  "`LfiDaeSlowVoltage`.`dbUserId`,"
  "`LfiDaeSlowVoltage`.`creationDate`,"
  "`LfiDaeSlowVoltage`.`das_id`,"
  "`LfiDaeSlowVoltage`.`relative_path`,"
  "`LfiDaeSlowVoltage`.`runId`,"
  "`LfiDaeSlowVoltage`.`startTime`,"
  "`LfiDaeSlowVoltage`.`endTime`,"
  "`LfiDaeSlowVoltage`.`apid`,"
  "`LfiDaeSlowVoltage`.`type`,"
  "`LfiDaeSlowVoltage`.`subtype`,"
  "`LfiDaeSlowVoltage`.`pi1Val`,"
  "`LfiDaeSlowVoltage`.`pi2Val`"
  " FROM `LfiDaeSlowVoltage`"
  " WHERE `LfiDaeSlowVoltage`.`das_id`=?";

  const char access::object_traits< ::LfiDaeSlowVoltage >::update_statement[] =
  "UPDATE `LfiDaeSlowVoltage` SET "
  "`name`=?,"
  "`version`=?,"
  "`dbUserId`=?,"
  "`creationDate`=?,"
  "`relative_path`=?,"
  "`runId`=?,"
  "`startTime`=?,"
  "`endTime`=?,"
  "`apid`=?,"
  "`type`=?,"
  "`subtype`=?,"
  "`pi1Val`=?,"
  "`pi2Val`=?"
  " WHERE `das_id`=?";

  const char access::object_traits< ::LfiDaeSlowVoltage >::erase_statement[] =
  "DELETE FROM `LfiDaeSlowVoltage`"
  " WHERE `das_id`=?";

  const char access::object_traits< ::LfiDaeSlowVoltage >::query_statement[] =
  "SELECT "
  "`LfiDaeSlowVoltage`.`name`,"
  "`LfiDaeSlowVoltage`.`version`,"
  "`LfiDaeSlowVoltage`.`dbUserId`,"
  "`LfiDaeSlowVoltage`.`creationDate`,"
  "`LfiDaeSlowVoltage`.`das_id`,"
  "`LfiDaeSlowVoltage`.`relative_path`,"
  "`LfiDaeSlowVoltage`.`runId`,"
  "`LfiDaeSlowVoltage`.`startTime`,"
  "`LfiDaeSlowVoltage`.`endTime`,"
  "`LfiDaeSlowVoltage`.`apid`,"
  "`LfiDaeSlowVoltage`.`type`,"
  "`LfiDaeSlowVoltage`.`subtype`,"
  "`LfiDaeSlowVoltage`.`pi1Val`,"
  "`LfiDaeSlowVoltage`.`pi2Val`"
  " FROM `LfiDaeSlowVoltage`"
  " ";

  const char access::object_traits< ::LfiDaeSlowVoltage >::erase_query_statement[] =
  "DELETE FROM `LfiDaeSlowVoltage`"
  " ";

  const char access::object_traits< ::LfiDaeSlowVoltage >::table_name[] =
  "`LfiDaeSlowVoltage`";

  void access::object_traits< ::LfiDaeSlowVoltage >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.das_id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.das_id_ = static_cast< id_type > (st.id ());

    id_image_type& i (sts.id_image ());
    init (i, obj.das_id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // columns_
    //
    {
      ::std::map< ::std::basic_string< char >, ::LfiDaeSlowVoltageColumn > const& v =
        obj.columns_;

      columns_traits::persist (
        v,
        idb,
        sts.container_statment_cache ().columns_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    callback (db, obj, callback_event::pre_update);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.das_id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    // columns_
    //
    {
      ::std::map< ::std::basic_string< char >, ::LfiDaeSlowVoltageColumn > const& v =
        obj.columns_;

      columns_traits::update (
        v,
        idb,
        sts.container_statment_cache ().columns_);
    }

    callback (db, obj, callback_event::post_update);
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // columns_
    //
    columns_traits::erase (
      idb,
      sts.container_statment_cache ().columns_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits< ::LfiDaeSlowVoltage >::pointer_type
  access::object_traits< ::LfiDaeSlowVoltage >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::LfiDaeSlowVoltage >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::insert_guard ig (
      reference_cache_traits::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::LfiDaeSlowVoltage >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.das_id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::LfiDaeSlowVoltage >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits< ::LfiDaeSlowVoltage >::
  load_ (statements_type& sts, object_type& obj)
  {
    mysql::binding& idb (sts.id_image_binding ());

    // columns_
    //
    {
      ::std::map< ::std::basic_string< char >, ::LfiDaeSlowVoltageColumn >& v =
        obj.columns_;

      columns_traits::load (
        v,
        idb,
        sts.container_statment_cache ().columns_);
    }
  }

  result< access::object_traits< ::LfiDaeSlowVoltage >::object_type >
  access::object_traits< ::LfiDaeSlowVoltage >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::LfiDaeSlowVoltage >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  // TestLogImage
  //

  access::object_traits< ::TestLogImage >::id_type
  access::object_traits< ::TestLogImage >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        id,
        i.das_id_value,
        i.das_id_null);
    }

    return id;
  }

  bool access::object_traits< ::TestLogImage >::
  grow (image_type& i, my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // EssentialMetadata base
    //
    if (object_traits< ::EssentialMetadata >::grow (i, t + 0UL))
      grew = true;

    // das_id_
    //
    t[4UL] = 0;

    // naxis1_
    //
    t[5UL] = 0;

    // naxis2_
    //
    t[6UL] = 0;

    // format_
    //
    if (t[7UL])
    {
      i.format_value.capacity (i.format_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits< ::TestLogImage >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // EssentialMetadata base
    //
    object_traits< ::EssentialMetadata >::bind (b + n, i, sk);
    n += 4UL;

    // das_id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 0;
      b[n].buffer = &i.das_id_value;
      b[n].is_null = &i.das_id_null;
      n++;
    }

    // naxis1_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.naxis1_value;
    b[n].is_null = &i.naxis1_null;
    n++;

    // naxis2_
    //
    b[n].buffer_type = MYSQL_TYPE_LONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.naxis2_value;
    b[n].is_null = &i.naxis2_null;
    n++;

    // format_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.format_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.format_value.capacity ());
    b[n].length = &i.format_size;
    b[n].is_null = &i.format_null;
    n++;
  }

  void access::object_traits< ::TestLogImage >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::TestLogImage >::
  init (image_type& i, const object_type& o, mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // EssentialMetadata base
    //
    if (object_traits< ::EssentialMetadata >::init (i, o, sk))
      grew = true;

    // das_id_
    //
    if (sk == statement_insert)
    {
      long long int const& v =
        o.das_id_;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.das_id_value, is_null, v);
      i.das_id_null = is_null;
    }

    // naxis1_
    //
    {
      int const& v =
        o.naxis1_;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.naxis1_value, is_null, v);
      i.naxis1_null = is_null;
    }

    // naxis2_
    //
    {
      int const& v =
        o.naxis2_;

      bool is_null (false);
      mysql::value_traits<
          int,
          mysql::id_long >::set_image (
        i.naxis2_value, is_null, v);
      i.naxis2_null = is_null;
    }

    // format_
    //
    {
      ::std::string const& v =
        o.format_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.format_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.format_value,
        size,
        is_null,
        v);
      i.format_null = is_null;
      i.format_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.format_value.capacity ());
    }

    return grew;
  }

  void access::object_traits< ::TestLogImage >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EssentialMetadata base
    //
    object_traits< ::EssentialMetadata >::init (o, i, db);

    // das_id_
    //
    {
      long long int& v =
        o.das_id_;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.das_id_value,
        i.das_id_null);
    }

    // naxis1_
    //
    {
      int& v =
        o.naxis1_;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.naxis1_value,
        i.naxis1_null);
    }

    // naxis2_
    //
    {
      int& v =
        o.naxis2_;

      mysql::value_traits<
          int,
          mysql::id_long >::set_value (
        v,
        i.naxis2_value,
        i.naxis2_null);
    }

    // format_
    //
    {
      ::std::string& v =
        o.format_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.format_value,
        i.format_size,
        i.format_null);
    }
  }

  void access::object_traits< ::TestLogImage >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::TestLogImage >::container_statement_cache_type
  {
    container_statement_cache_type (mysql::connection&)
    {
    }
  };

  const char access::object_traits< ::TestLogImage >::persist_statement[] =
  "INSERT INTO `TestLogImage` ("
  "`name`,"
  "`version`,"
  "`dbUserId`,"
  "`creationDate`,"
  "`das_id`,"
  "`naxis1`,"
  "`naxis2`,"
  "`format`)"
  " VALUES (?,?,?,?,?,?,?,?)";

  const char access::object_traits< ::TestLogImage >::find_statement[] =
  "SELECT "
  "`TestLogImage`.`name`,"
  "`TestLogImage`.`version`,"
  "`TestLogImage`.`dbUserId`,"
  "`TestLogImage`.`creationDate`,"
  "`TestLogImage`.`das_id`,"
  "`TestLogImage`.`naxis1`,"
  "`TestLogImage`.`naxis2`,"
  "`TestLogImage`.`format`"
  " FROM `TestLogImage`"
  " WHERE `TestLogImage`.`das_id`=?";

  const char access::object_traits< ::TestLogImage >::update_statement[] =
  "UPDATE `TestLogImage` SET "
  "`name`=?,"
  "`version`=?,"
  "`dbUserId`=?,"
  "`creationDate`=?,"
  "`naxis1`=?,"
  "`naxis2`=?,"
  "`format`=?"
  " WHERE `das_id`=?";

  const char access::object_traits< ::TestLogImage >::erase_statement[] =
  "DELETE FROM `TestLogImage`"
  " WHERE `das_id`=?";

  const char access::object_traits< ::TestLogImage >::query_statement[] =
  "SELECT "
  "`TestLogImage`.`name`,"
  "`TestLogImage`.`version`,"
  "`TestLogImage`.`dbUserId`,"
  "`TestLogImage`.`creationDate`,"
  "`TestLogImage`.`das_id`,"
  "`TestLogImage`.`naxis1`,"
  "`TestLogImage`.`naxis2`,"
  "`TestLogImage`.`format`"
  " FROM `TestLogImage`"
  " ";

  const char access::object_traits< ::TestLogImage >::erase_query_statement[] =
  "DELETE FROM `TestLogImage`"
  " ";

  const char access::object_traits< ::TestLogImage >::table_name[] =
  "`TestLogImage`";

  void access::object_traits< ::TestLogImage >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.das_id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.das_id_ = static_cast< id_type > (st.id ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits< ::TestLogImage >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    callback (db, obj, callback_event::pre_update);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.das_id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
  }

  void access::object_traits< ::TestLogImage >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits< ::TestLogImage >::pointer_type
  access::object_traits< ::TestLogImage >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::TestLogImage >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::insert_guard ig (
      reference_cache_traits::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::TestLogImage >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.das_id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::TestLogImage >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits< ::TestLogImage >::object_type >
  access::object_traits< ::TestLogImage >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::TestLogImage >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }

  // TestLog
  //

  // images_
  //

  const char access::object_traits< ::TestLog >::images_traits::
  select_all_statement[] =
  "SELECT "
  "`TestLog_images`.`value`"
  " FROM `TestLog_images`"
  " WHERE `TestLog_images`.`object_id`=?";

  const char access::object_traits< ::TestLog >::images_traits::
  insert_one_statement[] =
  "INSERT INTO `TestLog_images` ("
  "`object_id`,"
  "`value`)"
  " VALUES (?,?)";

  const char access::object_traits< ::TestLog >::images_traits::
  delete_all_statement[] =
  "DELETE FROM `TestLog_images`"
  " WHERE `object_id`=?";

  void access::object_traits< ::TestLog >::images_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        cond_image_type& c)
  {
    ODB_POTENTIALLY_UNUSED (c);

    std::size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;
  }

  void access::object_traits< ::TestLog >::images_traits::
  bind (MYSQL_BIND* b,
        const MYSQL_BIND* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace mysql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // value
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits< ::TestLog >::images_traits::
  grow (data_image_type& i, my_bool* t)
  {
    bool grew (false);

    // value
    //
    t[0UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits< ::TestLog >::images_traits::
  init (data_image_type& i, const value_type& v)
  {
    using namespace mysql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // value
    //
    {
      typedef object_traits< ::TestLogImage > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          ptr_traits::object_id< ptr_traits::element_type  > (v));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_longlong >::set_image (
          i.value_value, is_null, id);
        i.value_null = is_null;
      }
      else
        throw null_pointer ();
    }

    if (grew)
      i.version++;
  }

  void access::object_traits< ::TestLog >::images_traits::
  init (value_type& v, const data_image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // value
    //
    {
      typedef object_traits< ::TestLogImage > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        throw null_pointer ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_longlong >::set_value (
          id,
          i.value_value,
          i.value_null);

        v = ptr_traits::pointer_type (*db, id);
      }
    }
  }

  void access::object_traits< ::TestLog >::images_traits::
  insert_one (index_type, const value_type& v, void* d)
  {
    using namespace mysql;

    statements_type& sts (*static_cast< statements_type* > (d));
    binding& b (sts.data_image_binding ());
    data_image_type& di (sts.data_image ());

    init (di, v);

    if (di.version != sts.data_image_version ())
    {
      bind (b.bind, 0, sts.id_binding ().count, di);
      sts.data_image_version (di.version);
      b.version++;
      sts.select_image_binding ().version++;
    }

    if (!sts.insert_one_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits< ::TestLog >::images_traits::
  load_all (index_type&, value_type& v, void* d)
  {
    using namespace mysql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());
    init (v, di, &sts.connection ().database ());

    select_statement& st (sts.select_all_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits< ::TestLog >::images_traits::
  delete_all (void* d)
  {
    using namespace mysql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_all_statement ().execute ();
  }

  void access::object_traits< ::TestLog >::images_traits::
  persist (const container_type& c,
           const mysql::binding& id,
           statements_type& sts)
  {
    using namespace mysql;

    binding& b (sts.data_image_binding ());
    if (id.version != sts.data_id_binding_version () || b.version == 0)
    {
      bind (b.bind, id.bind, id.count, sts.data_image ());
      sts.data_id_binding_version (id.version);
      b.version++;
      sts.select_image_binding ().version++;
    }

    sts.id_binding (id);
    functions_type& fs (sts.functions ());
    fs.ordered (false);
    container_traits_type::persist (c, fs);
  }

  void access::object_traits< ::TestLog >::images_traits::
  load (container_type& c,
        const mysql::binding& id,
        statements_type& sts)
  {
    using namespace mysql;

    binding& db (sts.data_image_binding ());
    if (id.version != sts.data_id_binding_version () || db.version == 0)
    {
      bind (db.bind, id.bind, id.count, sts.data_image ());
      sts.data_id_binding_version (id.version);
      db.version++;
      sts.select_image_binding ().version++;
    }

    binding& cb (sts.cond_image_binding ());
    if (id.version != sts.cond_id_binding_version () || cb.version == 0)
    {
      bind (cb.bind, id.bind, id.count, sts.cond_image ());
      sts.cond_id_binding_version (id.version);
      cb.version++;
    }

    select_statement& st (sts.select_all_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    sts.id_binding (id);
    functions_type& fs (sts.functions ());
    fs.ordered (false);
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits< ::TestLog >::images_traits::
  update (const container_type& c,
          const mysql::binding& id,
          statements_type& sts)
  {
    using namespace mysql;

    binding& db (sts.data_image_binding ());
    if (id.version != sts.data_id_binding_version () || db.version == 0)
    {
      bind (db.bind, id.bind, id.count, sts.data_image ());
      sts.data_id_binding_version (id.version);
      db.version++;
      sts.select_image_binding ().version++;
    }

    binding& cb (sts.cond_image_binding ());
    if (id.version != sts.cond_id_binding_version () || cb.version == 0)
    {
      bind (cb.bind, id.bind, id.count, sts.cond_image ());
      sts.cond_id_binding_version (id.version);
      cb.version++;
    }

    sts.id_binding (id);
    functions_type& fs (sts.functions ());
    fs.ordered (false);
    container_traits_type::update (c, fs);
  }

  void access::object_traits< ::TestLog >::images_traits::
  erase (const mysql::binding& id, statements_type& sts)
  {
    using namespace mysql;

    binding& b (sts.cond_image_binding ());
    if (id.version != sts.cond_id_binding_version () || b.version == 0)
    {
      bind (b.bind, id.bind, id.count, sts.cond_image ());
      sts.cond_id_binding_version (id.version);
      b.version++;
    }

    sts.id_binding (id);
    functions_type& fs (sts.functions ());
    fs.ordered (false);
    container_traits_type::erase (fs);
  }

  access::object_traits< ::TestLog >::id_type
  access::object_traits< ::TestLog >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        id,
        i.das_id_value,
        i.das_id_null);
    }

    return id;
  }

  bool access::object_traits< ::TestLog >::
  grow (image_type& i, my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // EssentialMetadata base
    //
    if (object_traits< ::EssentialMetadata >::grow (i, t + 0UL))
      grew = true;

    // das_id_
    //
    t[4UL] = 0;

    // runId_
    //
    if (t[5UL])
    {
      i.runId_value.capacity (i.runId_size);
      grew = true;
    }

    // startTime_
    //
    t[6UL] = 0;

    // endTime_
    //
    t[7UL] = 0;

    // log_
    //
    if (t[8UL])
    {
      i.log_value.capacity (i.log_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits< ::TestLog >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // EssentialMetadata base
    //
    object_traits< ::EssentialMetadata >::bind (b + n, i, sk);
    n += 4UL;

    // das_id_
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 0;
      b[n].buffer = &i.das_id_value;
      b[n].is_null = &i.das_id_null;
      n++;
    }

    // runId_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.runId_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.runId_value.capacity ());
    b[n].length = &i.runId_size;
    b[n].is_null = &i.runId_null;
    n++;

    // startTime_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.startTime_value;
    b[n].is_null = &i.startTime_null;
    n++;

    // endTime_
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.endTime_value;
    b[n].is_null = &i.endTime_null;
    n++;

    // log_
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.log_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.log_value.capacity ());
    b[n].length = &i.log_size;
    b[n].is_null = &i.log_null;
    n++;
  }

  void access::object_traits< ::TestLog >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 0;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits< ::TestLog >::
  init (image_type& i, const object_type& o, mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // EssentialMetadata base
    //
    if (object_traits< ::EssentialMetadata >::init (i, o, sk))
      grew = true;

    // das_id_
    //
    if (sk == statement_insert)
    {
      long long int const& v =
        o.das_id_;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.das_id_value, is_null, v);
      i.das_id_null = is_null;
    }

    // runId_
    //
    {
      ::std::string const& v =
        o.runId_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.runId_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.runId_value,
        size,
        is_null,
        v);
      i.runId_null = is_null;
      i.runId_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.runId_value.capacity ());
    }

    // startTime_
    //
    {
      long long int const& v =
        o.startTime_;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.startTime_value, is_null, v);
      i.startTime_null = is_null;
    }

    // endTime_
    //
    {
      long long int const& v =
        o.endTime_;

      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.endTime_value, is_null, v);
      i.endTime_null = is_null;
    }

    // log_
    //
    {
      ::std::string const& v =
        o.log_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.log_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.log_value,
        size,
        is_null,
        v);
      i.log_null = is_null;
      i.log_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.log_value.capacity ());
    }

    return grew;
  }

  void access::object_traits< ::TestLog >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // EssentialMetadata base
    //
    object_traits< ::EssentialMetadata >::init (o, i, db);

    // das_id_
    //
    {
      long long int& v =
        o.das_id_;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.das_id_value,
        i.das_id_null);
    }

    // runId_
    //
    {
      ::std::string& v =
        o.runId_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.runId_value,
        i.runId_size,
        i.runId_null);
    }

    // startTime_
    //
    {
      long long int& v =
        o.startTime_;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.startTime_value,
        i.startTime_null);
    }

    // endTime_
    //
    {
      long long int& v =
        o.endTime_;

      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_value (
        v,
        i.endTime_value,
        i.endTime_null);
    }

    // log_
    //
    {
      ::std::string& v =
        o.log_;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.log_value,
        i.log_size,
        i.log_null);
    }
  }

  void access::object_traits< ::TestLog >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          long long int,
          mysql::id_longlong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  struct access::object_traits< ::TestLog >::container_statement_cache_type
  {
    mysql::container_statements_impl< images_traits > images_;

    container_statement_cache_type (mysql::connection& c)
    : images_ (c)
    {
    }
  };

  const char access::object_traits< ::TestLog >::persist_statement[] =
  "INSERT INTO `TestLog` ("
  "`name`,"
  "`version`,"
  "`dbUserId`,"
  "`creationDate`,"
  "`das_id`,"
  "`runId`,"
  "`startTime`,"
  "`endTime`,"
  "`log`)"
  " VALUES (?,?,?,?,?,?,?,?,?)";

  const char access::object_traits< ::TestLog >::find_statement[] =
  "SELECT "
  "`TestLog`.`name`,"
  "`TestLog`.`version`,"
  "`TestLog`.`dbUserId`,"
  "`TestLog`.`creationDate`,"
  "`TestLog`.`das_id`,"
  "`TestLog`.`runId`,"
  "`TestLog`.`startTime`,"
  "`TestLog`.`endTime`,"
  "`TestLog`.`log`"
  " FROM `TestLog`"
  " WHERE `TestLog`.`das_id`=?";

  const char access::object_traits< ::TestLog >::update_statement[] =
  "UPDATE `TestLog` SET "
  "`name`=?,"
  "`version`=?,"
  "`dbUserId`=?,"
  "`creationDate`=?,"
  "`runId`=?,"
  "`startTime`=?,"
  "`endTime`=?,"
  "`log`=?"
  " WHERE `das_id`=?";

  const char access::object_traits< ::TestLog >::erase_statement[] =
  "DELETE FROM `TestLog`"
  " WHERE `das_id`=?";

  const char access::object_traits< ::TestLog >::query_statement[] =
  "SELECT "
  "`TestLog`.`name`,"
  "`TestLog`.`version`,"
  "`TestLog`.`dbUserId`,"
  "`TestLog`.`creationDate`,"
  "`TestLog`.`das_id`,"
  "`TestLog`.`runId`,"
  "`TestLog`.`startTime`,"
  "`TestLog`.`endTime`,"
  "`TestLog`.`log`"
  " FROM `TestLog`"
  " ";

  const char access::object_traits< ::TestLog >::erase_query_statement[] =
  "DELETE FROM `TestLog`"
  " ";

  const char access::object_traits< ::TestLog >::table_name[] =
  "`TestLog`";

  void access::object_traits< ::TestLog >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    im.das_id_value = 0;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.das_id_ = static_cast< id_type > (st.id ());

    id_image_type& i (sts.id_image ());
    init (i, obj.das_id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // images_
    //
    {
      ::std::vector< ::odb::tr1::lazy_shared_ptr< ::TestLogImage > > const& v =
        obj.images_;

      images_traits::persist (
        v,
        idb,
        sts.container_statment_cache ().images_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits< ::TestLog >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace mysql;

    callback (db, obj, callback_event::pre_update);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.das_id_);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (i.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    // images_
    //
    {
      ::std::vector< ::odb::tr1::lazy_shared_ptr< ::TestLogImage > > const& v =
        obj.images_;

      images_traits::update (
        v,
        idb,
        sts.container_statment_cache ().images_);
    }

    callback (db, obj, callback_event::post_update);
  }

  void access::object_traits< ::TestLog >::
  erase (database& db, const id_type& id)
  {
    using namespace mysql;

    ODB_POTENTIALLY_UNUSED (db);

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    // images_
    //
    images_traits::erase (
      idb,
      sts.container_statment_cache ().images_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits< ::TestLog >::pointer_type
  access::object_traits< ::TestLog >::
  find (database& db, const id_type& id)
  {
    using namespace mysql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::TestLog >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::insert_guard ig (
      reference_cache_traits::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::TestLog >::
  reload (database& db, object_type& obj)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.das_id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::TestLog >::
  find_ (statements_type& sts, const id_type* id)
  {
    using namespace mysql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits< ::TestLog >::
  load_ (statements_type& sts, object_type& obj)
  {
    mysql::binding& idb (sts.id_image_binding ());

    // images_
    //
    {
      ::std::vector< ::odb::tr1::lazy_shared_ptr< ::TestLogImage > >& v =
        obj.images_;

      images_traits::load (
        v,
        idb,
        sts.container_statment_cache ().images_);
    }
  }

  result< access::object_traits< ::TestLog >::object_type >
  access::object_traits< ::TestLog >::
  query (database&, const query_base_type& q)
  {
    using namespace mysql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) mysql::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::TestLog >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace mysql;

    mysql::connection& conn (
      mysql::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
