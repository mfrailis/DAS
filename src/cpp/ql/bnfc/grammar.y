/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  std::cout << "line " << yy_mylinenumber << std::endl ;
  fprintf(stderr,"error: %s\n",str);
}



static BoolExp* YY_RESULT_BoolExp_ = 0;
BoolExp* pBoolExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_BoolExp_;
  }
}
BoolExp* pBoolExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_BoolExp_;
  }
}

static StrExp* YY_RESULT_StrExp_ = 0;
StrExp* pStrExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_StrExp_;
  }
}
StrExp* pStrExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_StrExp_;
  }
}

static CompExp* YY_RESULT_CompExp_ = 0;
CompExp* pCompExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CompExp_;
  }
}
CompExp* pCompExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_CompExp_;
  }
}

static Exp* YY_RESULT_Exp_ = 0;
Exp* pExp(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}
Exp* pExp(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}

static NumConst* YY_RESULT_NumConst_ = 0;
NumConst* pNumConst(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_NumConst_;
  }
}
NumConst* pNumConst(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_NumConst_;
  }
}

static Name* YY_RESULT_Name_ = 0;
Name* pName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Name_;
  }
}
Name* pName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Name_;
  }
}

static ListName* YY_RESULT_ListName_ = 0;
ListName* pListName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListName_;
  }
}
ListName* pListName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListName_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  BoolExp* boolexp_;
  StrExp* strexp_;
  CompExp* compexp_;
  Exp* exp_;
  NumConst* numconst_;
  Name* name_;
  ListName* listname_;

}


%token _ERROR_
%token _SYMB_0    //   &&
%token _SYMB_1    //   ||
%token _SYMB_2    //   !
%token _SYMB_3    //   (
%token _SYMB_4    //   )
%token _SYMB_5    //   .startsWith
%token _SYMB_6    //   .endsWith
%token _SYMB_7    //   +
%token _SYMB_8    //   -
%token _SYMB_9    //   *
%token _SYMB_10    //   /
%token _SYMB_11    //   .
%token<string_> _SYMB_12    //   CompOp
%token<string_> _SYMB_13    //   Str
%token<string_> _SYMB_14    //   BoolConst

%type <boolexp_> BoolExp
%type <boolexp_> BoolExp2
%type <boolexp_> BoolExp3
%type <boolexp_> BoolExp1
%type <strexp_> StrExp
%type <compexp_> CompExp
%type <exp_> Exp
%type <exp_> Exp2
%type <exp_> Exp3
%type <exp_> Exp1
%type <numconst_> NumConst
%type <name_> Name
%type <listname_> ListName

%token<int_> _INTEGER_
%token<double_> _DOUBLE_
%token<string_> _IDENT_

%%
BoolExp : BoolExp _SYMB_0 BoolExp1 {  $$ = new BoolExpAnd($1, $3); YY_RESULT_BoolExp_= $$; } 
  | BoolExp _SYMB_1 BoolExp1 {  $$ = new BoolExpOr($1, $3); YY_RESULT_BoolExp_= $$; }
  | BoolExp1 {  $$ = $1; YY_RESULT_BoolExp_= $$; }
;
BoolExp2 : _SYMB_2 BoolExp2 {  $$ = new BoolExpNot($2);  } 
  | BoolExp3 {  $$ = $1;  }
;
BoolExp3 : CompExp {  $$ = new BoolCompExp($1);  } 
  | StrExp {  $$ = new BoolStrExp($1);  }
  | _SYMB_3 BoolExp _SYMB_4 {  $$ = $2;  }
;
BoolExp1 : BoolExp2 {  $$ = $1;  } 
;
StrExp : ListName _SYMB_5 _SYMB_3 _SYMB_13 _SYMB_4 {  std::reverse($1->begin(),$1->end()) ;$$ = new StartsWith($1, $4);  } 
  | ListName _SYMB_6 _SYMB_3 _SYMB_13 _SYMB_4 {  std::reverse($1->begin(),$1->end()) ;$$ = new EndsWith($1, $4);  }
;
CompExp : Exp _SYMB_12 Exp {  $$ = new CompExpAA($1, $2, $3);  } 
  | _SYMB_13 _SYMB_12 Exp {  $$ = new CompExpSC($1, $2, $3);  }
  | Exp _SYMB_12 _SYMB_13 {  $$ = new CompExpCS($1, $2, $3);  }
  | _SYMB_14 _SYMB_12 Exp {  $$ = new CompExpBA($1, $2, $3);  }
  | Exp _SYMB_12 _SYMB_14 {  $$ = new CompExpAB($1, $2, $3);  }
;
Exp : Exp _SYMB_7 Exp2 {  $$ = new ExpSum($1, $3);  } 
  | Exp _SYMB_8 Exp2 {  $$ = new ExpSub($1, $3);  }
  | Exp1 {  $$ = $1;  }
;
Exp2 : Exp2 _SYMB_9 Exp3 {  $$ = new ExpMul($1, $3);  } 
  | Exp2 _SYMB_10 Exp3 {  $$ = new ExpDiv($1, $3);  }
  | Exp3 {  $$ = $1;  }
;
Exp3 : NumConst {  $$ = new ExpConst($1);  } 
  | ListName {  std::reverse($1->begin(),$1->end()) ;$$ = new ExpName($1);  }
  | _SYMB_3 Exp _SYMB_4 {  $$ = $2;  }
;
Exp1 : Exp2 {  $$ = $1;  } 
;
NumConst : _DOUBLE_ {  $$ = new ConstFloat($1);  } 
  | _INTEGER_ {  $$ = new ConstInt($1);  }
;
Name : _IDENT_ {  $$ = new Keyword($1);  } 
;
ListName : Name {  $$ = new ListName() ; $$->push_back($1);  } 
  | Name _SYMB_11 ListName {  $3->push_back($1) ; $$ = $3 ;  }
;

