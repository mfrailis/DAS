#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef long long Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string CompOp;
typedef std::string Str;
typedef std::string BoolConst;


/********************   Forward Declarations    ********************/

class BoolExp;
class StrExp;
class CompExp;
class Exp;
class NumConst;
class Name;
class BoolExpAnd;
class BoolExpOr;
class BoolExpNot;
class BoolCompExp;
class BoolStrExp;
class StartsWith;
class EndsWith;
class CompExpAA;
class CompExpSC;
class CompExpCS;
class CompExpBA;
class CompExpAB;
class ExpSum;
class ExpSub;
class ExpMul;
class ExpDiv;
class ExpConst;
class ExpName;
class ConstFloat;
class ConstInt;
class Keyword;
class ListName;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitBoolExp(BoolExp *p) = 0;
  virtual void visitStrExp(StrExp *p) = 0;
  virtual void visitCompExp(CompExp *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitNumConst(NumConst *p) = 0;
  virtual void visitName(Name *p) = 0;
  virtual void visitBoolExpAnd(BoolExpAnd *p) = 0;
  virtual void visitBoolExpOr(BoolExpOr *p) = 0;
  virtual void visitBoolExpNot(BoolExpNot *p) = 0;
  virtual void visitBoolCompExp(BoolCompExp *p) = 0;
  virtual void visitBoolStrExp(BoolStrExp *p) = 0;
  virtual void visitStartsWith(StartsWith *p) = 0;
  virtual void visitEndsWith(EndsWith *p) = 0;
  virtual void visitCompExpAA(CompExpAA *p) = 0;
  virtual void visitCompExpSC(CompExpSC *p) = 0;
  virtual void visitCompExpCS(CompExpCS *p) = 0;
  virtual void visitCompExpBA(CompExpBA *p) = 0;
  virtual void visitCompExpAB(CompExpAB *p) = 0;
  virtual void visitExpSum(ExpSum *p) = 0;
  virtual void visitExpSub(ExpSub *p) = 0;
  virtual void visitExpMul(ExpMul *p) = 0;
  virtual void visitExpDiv(ExpDiv *p) = 0;
  virtual void visitExpConst(ExpConst *p) = 0;
  virtual void visitExpName(ExpName *p) = 0;
  virtual void visitConstFloat(ConstFloat *p) = 0;
  virtual void visitConstInt(ConstInt *p) = 0;
  virtual void visitKeyword(Keyword *p) = 0;
  virtual void visitListName(ListName *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitCompOp(CompOp x) = 0;
  virtual void visitStr(Str x) = 0;
  virtual void visitBoolConst(BoolConst x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class BoolExp : public Visitable
{
public:
  virtual BoolExp *clone() const = 0;

};

class StrExp : public Visitable
{
public:
  virtual StrExp *clone() const = 0;

};

class CompExp : public Visitable
{
public:
  virtual CompExp *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};

class NumConst : public Visitable
{
public:
  virtual NumConst *clone() const = 0;

};

class Name : public Visitable
{
public:
  virtual Name *clone() const = 0;

};



class BoolExpAnd : public BoolExp
{
public:
  BoolExp *boolexp_1;
  BoolExp *boolexp_2;

  BoolExpAnd(const BoolExpAnd &);
  BoolExpAnd &operator=(const BoolExpAnd &);
  BoolExpAnd(BoolExp *p1, BoolExp *p2);
  ~BoolExpAnd();
  virtual void accept(Visitor *v);
  virtual BoolExpAnd *clone() const;
  void swap(BoolExpAnd &);
};

class BoolExpOr : public BoolExp
{
public:
  BoolExp *boolexp_1;
  BoolExp *boolexp_2;

  BoolExpOr(const BoolExpOr &);
  BoolExpOr &operator=(const BoolExpOr &);
  BoolExpOr(BoolExp *p1, BoolExp *p2);
  ~BoolExpOr();
  virtual void accept(Visitor *v);
  virtual BoolExpOr *clone() const;
  void swap(BoolExpOr &);
};

class BoolExpNot : public BoolExp
{
public:
  BoolExp *boolexp_;

  BoolExpNot(const BoolExpNot &);
  BoolExpNot &operator=(const BoolExpNot &);
  BoolExpNot(BoolExp *p1);
  ~BoolExpNot();
  virtual void accept(Visitor *v);
  virtual BoolExpNot *clone() const;
  void swap(BoolExpNot &);
};

class BoolCompExp : public BoolExp
{
public:
  CompExp *compexp_;

  BoolCompExp(const BoolCompExp &);
  BoolCompExp &operator=(const BoolCompExp &);
  BoolCompExp(CompExp *p1);
  ~BoolCompExp();
  virtual void accept(Visitor *v);
  virtual BoolCompExp *clone() const;
  void swap(BoolCompExp &);
};

class BoolStrExp : public BoolExp
{
public:
  StrExp *strexp_;

  BoolStrExp(const BoolStrExp &);
  BoolStrExp &operator=(const BoolStrExp &);
  BoolStrExp(StrExp *p1);
  ~BoolStrExp();
  virtual void accept(Visitor *v);
  virtual BoolStrExp *clone() const;
  void swap(BoolStrExp &);
};

class StartsWith : public StrExp
{
public:
  ListName *listname_;
  Str str_;

  StartsWith(const StartsWith &);
  StartsWith &operator=(const StartsWith &);
  StartsWith(ListName *p1, Str p2);
  ~StartsWith();
  virtual void accept(Visitor *v);
  virtual StartsWith *clone() const;
  void swap(StartsWith &);
};

class EndsWith : public StrExp
{
public:
  ListName *listname_;
  Str str_;

  EndsWith(const EndsWith &);
  EndsWith &operator=(const EndsWith &);
  EndsWith(ListName *p1, Str p2);
  ~EndsWith();
  virtual void accept(Visitor *v);
  virtual EndsWith *clone() const;
  void swap(EndsWith &);
};

class CompExpAA : public CompExp
{
public:
  Exp *exp_1;
  CompOp compop_;
  Exp *exp_2;

  CompExpAA(const CompExpAA &);
  CompExpAA &operator=(const CompExpAA &);
  CompExpAA(Exp *p1, CompOp p2, Exp *p3);
  ~CompExpAA();
  virtual void accept(Visitor *v);
  virtual CompExpAA *clone() const;
  void swap(CompExpAA &);
};

class CompExpSC : public CompExp
{
public:
  Str str_;
  CompOp compop_;
  Exp *exp_;

  CompExpSC(const CompExpSC &);
  CompExpSC &operator=(const CompExpSC &);
  CompExpSC(Str p1, CompOp p2, Exp *p3);
  ~CompExpSC();
  virtual void accept(Visitor *v);
  virtual CompExpSC *clone() const;
  void swap(CompExpSC &);
};

class CompExpCS : public CompExp
{
public:
  Exp *exp_;
  CompOp compop_;
  Str str_;

  CompExpCS(const CompExpCS &);
  CompExpCS &operator=(const CompExpCS &);
  CompExpCS(Exp *p1, CompOp p2, Str p3);
  ~CompExpCS();
  virtual void accept(Visitor *v);
  virtual CompExpCS *clone() const;
  void swap(CompExpCS &);
};

class CompExpBA : public CompExp
{
public:
  BoolConst boolconst_;
  CompOp compop_;
  Exp *exp_;

  CompExpBA(const CompExpBA &);
  CompExpBA &operator=(const CompExpBA &);
  CompExpBA(BoolConst p1, CompOp p2, Exp *p3);
  ~CompExpBA();
  virtual void accept(Visitor *v);
  virtual CompExpBA *clone() const;
  void swap(CompExpBA &);
};

class CompExpAB : public CompExp
{
public:
  Exp *exp_;
  CompOp compop_;
  BoolConst boolconst_;

  CompExpAB(const CompExpAB &);
  CompExpAB &operator=(const CompExpAB &);
  CompExpAB(Exp *p1, CompOp p2, BoolConst p3);
  ~CompExpAB();
  virtual void accept(Visitor *v);
  virtual CompExpAB *clone() const;
  void swap(CompExpAB &);
};

class ExpSum : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpSum(const ExpSum &);
  ExpSum &operator=(const ExpSum &);
  ExpSum(Exp *p1, Exp *p2);
  ~ExpSum();
  virtual void accept(Visitor *v);
  virtual ExpSum *clone() const;
  void swap(ExpSum &);
};

class ExpSub : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpSub(const ExpSub &);
  ExpSub &operator=(const ExpSub &);
  ExpSub(Exp *p1, Exp *p2);
  ~ExpSub();
  virtual void accept(Visitor *v);
  virtual ExpSub *clone() const;
  void swap(ExpSub &);
};

class ExpMul : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpMul(const ExpMul &);
  ExpMul &operator=(const ExpMul &);
  ExpMul(Exp *p1, Exp *p2);
  ~ExpMul();
  virtual void accept(Visitor *v);
  virtual ExpMul *clone() const;
  void swap(ExpMul &);
};

class ExpDiv : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  ExpDiv(const ExpDiv &);
  ExpDiv &operator=(const ExpDiv &);
  ExpDiv(Exp *p1, Exp *p2);
  ~ExpDiv();
  virtual void accept(Visitor *v);
  virtual ExpDiv *clone() const;
  void swap(ExpDiv &);
};

class ExpConst : public Exp
{
public:
  NumConst *numconst_;

  ExpConst(const ExpConst &);
  ExpConst &operator=(const ExpConst &);
  ExpConst(NumConst *p1);
  ~ExpConst();
  virtual void accept(Visitor *v);
  virtual ExpConst *clone() const;
  void swap(ExpConst &);
};

class ExpName : public Exp
{
public:
  ListName *listname_;

  ExpName(const ExpName &);
  ExpName &operator=(const ExpName &);
  ExpName(ListName *p1);
  ~ExpName();
  virtual void accept(Visitor *v);
  virtual ExpName *clone() const;
  void swap(ExpName &);
};

class ConstFloat : public NumConst
{
public:
  Double double_;

  ConstFloat(const ConstFloat &);
  ConstFloat &operator=(const ConstFloat &);
  ConstFloat(Double p1);
  ~ConstFloat();
  virtual void accept(Visitor *v);
  virtual ConstFloat *clone() const;
  void swap(ConstFloat &);
};

class ConstInt : public NumConst
{
public:
  Integer integer_;

  ConstInt(const ConstInt &);
  ConstInt &operator=(const ConstInt &);
  ConstInt(Integer p1);
  ~ConstInt();
  virtual void accept(Visitor *v);
  virtual ConstInt *clone() const;
  void swap(ConstInt &);
};

class Keyword : public Name
{
public:
  Ident ident_;

  Keyword(const Keyword &);
  Keyword &operator=(const Keyword &);
  Keyword(Ident p1);
  ~Keyword();
  virtual void accept(Visitor *v);
  virtual Keyword *clone() const;
  void swap(Keyword &);
};



class ListName : public Visitable, public std::vector<Name*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListName *clone() const;
};



#endif
